import { Type } from 'io-ts';
import { Kind2, URIS, URIS2, URIS3 } from 'fp-ts/lib/HKT';
import { Adapter, Adapter1, Adapter2, Adapter3, MonadObservable, MonadObservable1, MonadObservable2, MonadObservable3 } from '../typeclasses/monad-observable/monad-observable';
import { MonadReader } from '../typeclasses/monad-reader/monad-reader.utils';
import { Filterable, Filterable1, Filterable2, Filterable3 } from 'fp-ts/lib/Filterable';
import { Alt, Alt1, Alt2, Alt3 } from 'fp-ts/lib/Alt';
export declare type LocalStorageContext = {
    localStorage: Storage;
    window: EventTarget & WindowEventHandlers;
};
export declare type LocalStorageClient<F> = {
    readonly getItem: <A>(key: string, codec: Type<A, unknown>, defaultValue: A) => Adapter<F, A>;
};
export declare type LocalStorageClient1<F extends URIS> = {
    readonly getItem: <A>(key: string, codec: Type<A, unknown>, defaultValue: A) => Adapter1<F, A>;
};
export declare type LocalStorageClient2<F extends URIS2> = {
    readonly getItem: <E, A>(key: string, codec: Type<A, unknown>, defaultValue: A) => Adapter2<F, E, A>;
};
export declare type LocalStorageClient3<F extends URIS3> = {
    readonly getItem: <R, E, A>(key: string, codec: Type<A, unknown>, defaultValue: A) => Adapter3<F, R, E, A>;
};
export declare function localStorageClient<R extends URIS2, M extends URIS3>(R: MonadReader<R>, M: MonadObservable3<M> & Filterable3<M> & Alt3<M>): Kind2<R, LocalStorageContext, LocalStorageClient3<M>>;
export declare function localStorageClient<R extends URIS2, M extends URIS2>(R: MonadReader<R>, M: MonadObservable2<M> & Filterable2<M> & Alt2<M>): Kind2<R, LocalStorageContext, LocalStorageClient2<M>>;
export declare function localStorageClient<R extends URIS2, M extends URIS>(R: MonadReader<R>, M: MonadObservable1<M> & Filterable1<M> & Alt1<M>): Kind2<R, LocalStorageContext, LocalStorageClient1<M>>;
export declare function localStorageClient<R extends URIS2, M>(R: MonadReader<R>, M: MonadObservable<M> & Filterable<M> & Alt<M>): Kind2<R, LocalStorageContext, LocalStorageClient<M>>;
