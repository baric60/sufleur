"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var io_ts_1 = require("io-ts");
var setFromArray_1 = require("io-ts-types/lib/setFromArray");
var Either_1 = require("fp-ts/lib/Either");
var pipeable_1 = require("fp-ts/lib/pipeable");
var Array_1 = require("fp-ts/lib/Array");
var Option_1 = require("fp-ts/lib/Option");
exports.reportIfFailed = function (validation) {
    return pipeable_1.pipe(validation, Either_1.mapLeft(function (e) {
        return pipeable_1.pipe(Array_1.last(e), Option_1.fold(function () { return new Error('Validation failure should contain at least one error'); }, function (e) { return new Error(getMessage(e)); }));
    }));
};
function getMessage(e) {
    return e.message !== undefined
        ? e.message
        : createMessage(e.context) + '\n in context: \n' + getContextPath(e.context);
}
function createMessage(context) {
    return ('\n Received: \n  ' +
        JSON.stringify(context[context.length - 1].actual) +
        '\n expected: \n  ' +
        context[context.length - 1].type.name +
        '\n in field \n  ' +
        context[context.length - 1].key);
}
function getContextPath(context) {
    return context
        .map(function (cEntry, index) {
        var padding = new Array(index * 2 + 2).fill(' ').join('');
        return (padding + cEntry.key + (index > 0 ? ': ' : '') + cEntry.type.name.replace(/([,{])/g, '$1 \n' + padding));
    })
        .join(' -> \n');
}
exports.integer = io_ts_1.brand(io_ts_1.number, function (n) { return n !== -Infinity && n !== Infinity && Math.floor(n) === n; }, 'Integer');
exports.nonNegative = io_ts_1.brand(io_ts_1.number, function (n) { return n >= 0.0; }, 'NonNegative');
exports.positive = io_ts_1.brand(io_ts_1.number, function (n) { return n > 0.0; }, 'Positive');
exports.natural = io_ts_1.intersection([exports.nonNegative, exports.integer], 'Natural');
exports.nonEmptySetFromArray = function (codec, ord) {
    return io_ts_1.brand(setFromArray_1.setFromArray(codec, ord), function (s) { return s.size > 0; }, 'NonEmptySet');
};
exports.JSONPrimitiveCodec = io_ts_1.union([io_ts_1.string, io_ts_1.number, io_ts_1.boolean, io_ts_1.null]);
exports.fraction = io_ts_1.brand(io_ts_1.number, function (n) { return true; }, 'Fraction');
exports.fractionFromPercentage = function (a) {
    return exports.reportIfFailed(exports.fraction.decode(a / 100));
};
exports.percentage = io_ts_1.brand(io_ts_1.number, function (n) { return true; }, 'Percentage');
exports.percentageFromFraction = function (a) {
    return exports.reportIfFailed(exports.percentage.decode(a * 100));
};
exports.mapper = function (decoded, encoded, name) {
    if (name === void 0) { name = decoded + " <-> " + encoded; }
    return new io_ts_1.Type(name, function (u) { return u === decoded; }, function (u, c) { return (u === encoded ? io_ts_1.success(decoded) : io_ts_1.failure(u, c)); }, function () { return encoded; });
};
//# sourceMappingURL=io-ts.js.map