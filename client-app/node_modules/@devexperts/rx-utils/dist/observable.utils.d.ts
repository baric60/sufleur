import { observable as rxjs, URI } from 'fp-ts-rxjs/lib/Observable';
import { MonadObservable1 } from '@devexperts/utils/dist/typeclasses/monad-observable/monad-observable';
import { Observable } from 'rxjs';
export declare const instanceObservable: typeof rxjs & MonadObservable1<URI>;
export declare const observable: {
    zero: () => Observable<never>;
    chain: <A, B>(f: (a: A) => Observable<B>) => (ma: Observable<A>) => Observable<B>;
    chainFirst: <A_1, B_1>(f: (a: A_1) => Observable<B_1>) => (ma: Observable<A_1>) => Observable<A_1>;
    flatten: <A_2>(mma: Observable<Observable<A_2>>) => Observable<A_2>;
    ap: <A_3>(fa: Observable<A_3>) => <B_2>(fab: Observable<(a: A_3) => B_2>) => Observable<B_2>;
    apFirst: <B_3>(fb: Observable<B_3>) => <A_4>(fa: Observable<A_4>) => Observable<A_4>;
    apSecond: <B_4>(fb: Observable<B_4>) => <A_5>(fa: Observable<A_5>) => Observable<B_4>;
    map: <A_6, B_5>(f: (a: A_6) => B_5) => (fa: Observable<A_6>) => Observable<B_5>;
    alt: <A_7>(that: () => Observable<A_7>) => (fa: Observable<A_7>) => Observable<A_7>;
    filter: {
        <A_8, B_6 extends A_8>(refinement: import("fp-ts/lib/function").Refinement<A_8, B_6>): (fa: Observable<A_8>) => Observable<B_6>;
        <A_9>(predicate: import("fp-ts/lib/function").Predicate<A_9>): (fa: Observable<A_9>) => Observable<A_9>;
    };
    filterMap: <A_10, B_7>(f: (a: A_10) => import("fp-ts/lib/Option").Option<B_7>) => (fa: Observable<A_10>) => Observable<B_7>;
    partition: {
        <A_11, B_8 extends A_11>(refinement: import("fp-ts/lib/function").Refinement<A_11, B_8>): (fa: Observable<A_11>) => import("fp-ts/lib/Compactable").Separated<Observable<A_11>, Observable<B_8>>;
        <A_12>(predicate: import("fp-ts/lib/function").Predicate<A_12>): (fa: Observable<A_12>) => import("fp-ts/lib/Compactable").Separated<Observable<A_12>, Observable<A_12>>;
    };
    partitionMap: <A_13, B_9, C>(f: (a: A_13) => import("fp-ts/lib/Either").Either<B_9, C>) => (fa: Observable<A_13>) => import("fp-ts/lib/Compactable").Separated<Observable<B_9>, Observable<C>>;
    compact: <A_14>(fa: Observable<import("fp-ts/lib/Option").Option<A_14>>) => Observable<A_14>;
    separate: <A_15, B_10>(fa: Observable<import("fp-ts/lib/Either").Either<A_15, B_10>>) => import("fp-ts/lib/Compactable").Separated<Observable<A_15>, Observable<B_10>>;
    of: <A_16>(a: A_16) => Observable<A_16>;
    URI: "Observable";
    fromEvent: import("@devexperts/utils/dist/typeclasses/monad-observable/monad-observable").FromEvent1<"Observable">;
    fromObservable: <A_17>(observable: import("@devexperts/utils/dist/typeclasses/monad-observable/monad-observable").Observable<A_17>) => Observable<A_17>;
    createAdapter: <A_18>() => [(a: A_18) => void, Observable<A_18>];
    subscribe: <A_19>(fa: Observable<A_19>, observer: import("@devexperts/utils/dist/typeclasses/monad-observable/monad-observable").Observer<A_19>) => import("@devexperts/utils/dist/typeclasses/monad-observable/monad-observable").Subscription;
    fromTask: <A_20>(fa: import("fp-ts/lib/Task").Task<A_20>) => Observable<A_20>;
    fromIO: <A_21>(fa: import("fp-ts/lib/IO").IO<A_21>) => Observable<A_21>;
};
