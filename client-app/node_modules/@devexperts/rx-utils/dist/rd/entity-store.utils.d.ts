import { Observable } from 'rxjs';
import { Predicate } from 'fp-ts/lib/function';
import { LiveData } from './live-data.utils';
export declare class EntityStore<L = never, A = never> {
    /**
     * Returns all values of current store.
     * By default returns Observable<RemoteData<L, A[]>>, but can be overwritten by "getAllValues$" setter.
     *
     */
    /**
    * Overwrites default return-value for "getAllValues$" getter.
    *
    */
    getAllValues$: any;
    private readonly cache;
    private readonly cachedStreams;
    private hasLoadedAll;
    private isLoadingAll;
    private _getAllValues$;
    readonly keys$: Observable<string[]>;
    /**
     * Returns entity by a key.
     * If there is no data by a key it triggers "get" argument to receive data and put it in a cache.
     *
     * @param key - Key (name) of an entity you want to receive.
     *
     * @param get - Describes how to receive data if cache by key is empty. Typically it's an API call.
     *
     * @returns - Returns a LiveData stream with requested entity.
     */
    get(key: string, get: () => LiveData<L, A>): LiveData<L, A>;
    /**
     * Triggers receiving all entities using "partialGetAll" argument and put them in a cache.
     *
     * @param pk - Means "Primary Key". Describes how to get a key from an entity (required for "updateCache").
     *
     * @param partialGetAll - Describes how to get all values for current entity store. Typically it's an API call.
     *
     * @param predicate - Predicate to filter "partialGetAll" result. E.g. you want to filter invalid entities or you have a business case - use only data created before 01.01.2018.
     *
     * @returns - Returns a LiveData stream with requested entities.
     */
    getAll(pk: (value: A) => string, partialGetAll: () => LiveData<L, A[]>, predicate?: Predicate<A>): LiveData<L, A[]>;
    /**
     * Remove an entity from current entity store.
     *
     * @param key - Key of an entity you want to remove. Using only in optimistic scenario, but required all the time.
     *
     * @param pk - Means "Primary Key". Describes how to get a key from an entity (required for "updateCache").
     *
     * @param remove - Describes how to remove an entity. Typically it's an API call. Should returns an array of existing entities. Exception should be handled inside this stream.
     *
     * @param optimistic - The flag - is optimistic scenario or not, true by default. If true, entity will be removed from a cache before an API call.
     *
     * @returns - Returns a LiveData stream with existing entities.
     */
    remove(key: string, pk: (value: A) => string, remove: () => LiveData<L, A[]>, optimistic?: boolean): LiveData<L, A[]>;
    /**
     * Create an entity
     *
     * @param pk - Means "Primary Key". Describes how to get a key from an entity (required for "updateCache").
     *
     * @param create - Describes how to create an entity. Returns a stream with a created entity.
     *
     * @returns - Returns a LiveData stream with created entity.
     */
    create(pk: (value: A) => string, create: () => LiveData<L, A>): LiveData<L, A>;
    /**
     * Update an entity
     *
     * @param key - Key for an entity you want to update.
     *
     * @param update - Describes how to update an entity. Returns a stream with updated entity. Typically it's an API call.
     *
     * @returns - Returns a LiveData stream with updated entity.
     */
    update(key: string, update: () => LiveData<L, A>): LiveData<L, A>;
    private updateCache;
}
