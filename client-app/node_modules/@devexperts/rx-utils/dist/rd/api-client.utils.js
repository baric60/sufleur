"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var remote_data_ts_1 = require("@devexperts/remote-data-ts");
var query_string_1 = tslib_1.__importDefault(require("query-string"));
var operators_1 = require("rxjs/operators");
var ajax_1 = require("rxjs/ajax");
var rxjs_1 = require("rxjs");
var RequestMethod;
(function (RequestMethod) {
    RequestMethod["Get"] = "GET";
    RequestMethod["Post"] = "POST";
    RequestMethod["Put"] = "PUT";
    RequestMethod["Delete"] = "DELETE";
})(RequestMethod = exports.RequestMethod || (exports.RequestMethod = {}));
/**
 * @deprecated
 */
var ApiClient = /** @class */ (function () {
    function ApiClient(baseHref, headers) {
        var _this = this;
        this.baseHref = baseHref;
        this.headers = headers;
        this.RequestMethod = RequestMethod;
        this.errorSubj$ = new rxjs_1.Subject();
        this.error$ = this.errorSubj$.asObservable();
        this.request = function (request) {
            var url = "" + _this.baseHref + request.url;
            var xhr = tslib_1.__assign(tslib_1.__assign({ withCredentials: true, responseType: 'json' }, request), { headers: tslib_1.__assign(tslib_1.__assign({ 'Content-Type': 'application/json; charset=UTF-8' }, _this.headers), request.headers), url: url });
            return ajax_1.ajax(xhr).pipe(operators_1.map(function (response) { return remote_data_ts_1.success(response.response); }), operators_1.catchError(function (response) {
                _this.errorSubj$.next(response);
                return rxjs_1.of(remote_data_ts_1.failure(response));
            }), operators_1.startWith(remote_data_ts_1.pending));
        };
        this.get = function (url, query) {
            return _this.request({
                url: _this.createURL(url, query),
                method: _this.RequestMethod.Get,
            });
        };
        this.post = function (url, body) {
            return _this.request({
                url: url,
                method: _this.RequestMethod.Post,
                body: body,
            });
        };
        this.remove = function (url, query) {
            if (query === void 0) { query = {}; }
            return _this.request({
                url: _this.createURL(url, query),
                method: _this.RequestMethod.Delete,
            });
        };
        this.put = function (url, body) {
            return _this.request({
                url: url,
                method: _this.RequestMethod.Put,
                body: body,
            });
        };
    }
    ApiClient.create = function (baseHref, extraHeaders) {
        return new ApiClient(baseHref, extraHeaders);
    };
    ApiClient.prototype.createURL = function (url, query) {
        return query ? url + "?" + query_string_1.default.stringify(query) : url;
    };
    return ApiClient;
}());
exports.ApiClient = ApiClient;
//# sourceMappingURL=api-client.utils.js.map