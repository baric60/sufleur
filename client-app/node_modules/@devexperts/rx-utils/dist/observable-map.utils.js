"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var object_1 = require("@devexperts/utils/dist/object/object");
var operators_1 = require("rxjs/operators");
/**
 * @deprecated Use some purely functional reactive structure, for example `Observable<Map<K, V>>`
 */
var ObservableMap = /** @class */ (function () {
    function ObservableMap() {
        var _this = this;
        this.cache = new Map();
        this.allSubject$ = new rxjs_1.BehaviorSubject(undefined);
        this.isInTransaction = false;
        this.hasChanges = false;
        this._keys$ = new rxjs_1.BehaviorSubject([]);
        this.keys$ = this._keys$.asObservable();
        this.values$ = this.allSubject$.pipe(operators_1.map(function () {
            var values = Array.from(_this.cache.values());
            return values.filter(isInitialized).map(function (entity) { return entity.subject.getValue(); });
        }), operators_1.shareReplay(1));
        this.entries$ = this.allSubject$.pipe(operators_1.map(function () {
            var entries = Array.from(_this.cache.entries()).filter(isEntryInitialized);
            return entries.map(function (entry) { return [entry[0], entry[1].subject.getValue()]; });
        }), operators_1.shareReplay(1));
        this.handleKeys = function (keys) { return _this._keys$.next(keys); };
    }
    Object.defineProperty(ObservableMap.prototype, "size", {
        get: function () {
            return this.cache.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ObservableMap.prototype, "isEmpty", {
        get: function () {
            return this.size === 0;
        },
        enumerable: true,
        configurable: true
    });
    ObservableMap.prototype.has = function (key) {
        return this.cache.has(key);
    };
    ObservableMap.prototype.get = function (key) {
        return this.getOrCreateCached(key).observable;
    };
    ObservableMap.prototype.getValue = function (key) {
        if (this.cache.has(key)) {
            var value = this.cache.get(key);
            if (object_1.isNotNullable(value) && value.hasValue) {
                return value.subject.getValue();
            }
        }
    };
    ObservableMap.prototype.set = function (key, value) {
        var _this = this;
        this.transaction(function () {
            var isCachedKey = _this.cache.has(key);
            var cached = _this.getOrCreateCached(key);
            if (cached.hasValue === false) {
                cached = initializeEntity(cached);
                _this.cache.set(key, cached);
                if (!isCachedKey) {
                    _this.handleKeys(Array.from(_this.cache.keys()));
                }
            }
            if (cached.subject.getValue() !== value) {
                cached.subject.next(value);
                _this.hasChanges = true;
            }
        });
    };
    ObservableMap.prototype.setMany = function (entries) {
        var _this = this;
        this.transaction(function () {
            entries.forEach(function (entry) {
                var key = entry[0], value = entry[1];
                _this.set(key, value);
            });
        });
    };
    ObservableMap.prototype.transaction = function (thunk) {
        if (!this.isInTransaction) {
            this.isInTransaction = true;
            thunk();
            if (this.hasChanges) {
                this.hasChanges = false;
                this.allSubject$.next(undefined);
            }
            this.isInTransaction = false;
        }
        else {
            // execute the thunk, notifications will be handled by parent transaction
            thunk();
        }
    };
    ObservableMap.prototype.delete = function (key) {
        var _this = this;
        this.transaction(function () {
            var isCachedKey = _this.cache.has(key);
            _this.cache.delete(key);
            if (isCachedKey) {
                _this.handleKeys(Array.from(_this.cache.keys()));
            }
            _this.hasChanges = true;
        });
    };
    ObservableMap.prototype.deleteMany = function (keys) {
        var _this = this;
        this.transaction(function () {
            keys.forEach(function (key) {
                _this.delete(key);
            });
        });
    };
    ObservableMap.prototype.clear = function () {
        var _this = this;
        this.transaction(function () {
            _this.cache.clear();
            _this.handleKeys(Array.from(_this.cache.keys()));
            _this.hasChanges = true;
        });
    };
    ObservableMap.prototype.getOrCreateCached = function (key) {
        var cached = this.cache.get(key);
        if (cached) {
            return cached;
        }
        var subject = new rxjs_1.BehaviorSubject(undefined);
        var observable = subject.pipe(operators_1.filter(object_1.isNotNullable), operators_1.distinctUntilChanged());
        var entity = {
            hasValue: false,
            subject: subject,
            observable: observable,
        };
        this.cache.set(key, entity);
        return entity;
    };
    return ObservableMap;
}());
exports.ObservableMap = ObservableMap;
function initializeEntity(entity) {
    return tslib_1.__assign(tslib_1.__assign({}, entity), { hasValue: true }); //unsafe cast because hasValue indicates that BehaviorSubject does not hold undefined values
}
function isInitialized(entity) {
    return entity.hasValue;
}
function isEntryInitialized(entry) {
    return isInitialized(entry[1]);
}
//# sourceMappingURL=observable-map.utils.js.map