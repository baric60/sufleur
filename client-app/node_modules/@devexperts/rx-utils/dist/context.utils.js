"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sink_utils_1 = require("./sink.utils");
var ReaderT_1 = require("fp-ts/lib/ReaderT");
var Array_1 = require("fp-ts/lib/Array");
var function_1 = require("fp-ts/lib/function");
var Apply_1 = require("fp-ts/lib/Apply");
exports.URI = 'Context';
var readerTSink = ReaderT_1.getReaderM(sink_utils_1.sink);
/**
 * @deprecated Use `Context` from `context2.utils.ts`
 */
var Context = /** @class */ (function () {
    function Context(run) {
        this.run = run;
    }
    Context.prototype.map = function (f) {
        return new Context(readerTSink.map(this.run, f));
    };
    Context.prototype.ap = function (fab) {
        return new Context(readerTSink.ap(fab.run, this.run));
    };
    Context.prototype.chain = function (f) {
        return new Context(readerTSink.chain(this.run, function (a) { return function (e) { return f(a).run(e); }; }));
    };
    return Context;
}());
exports.Context = Context;
var of = function (a) { return new Context(readerTSink.of(a)); };
var map = function (fa, f) { return fa.map(f); };
var ap = function (fab, fa) { return fa.ap(fab); };
var chain = function (fa, f) { return fa.chain(f); };
/**
 * @deprecated Use `Context` from `context2.utils.ts`
 */
exports.asks = function (f) { return new Context(function (e) { return new sink_utils_1.Sink(f(e)); }); };
/**
 * @deprecated Use `Context` from `context2.utils.ts`
 */
exports.ask = function () { return exports.asks(function_1.identity); };
/**
 * @deprecated Use `Context` from `context2.utils.ts`
 */
exports.context = {
    URI: exports.URI,
    of: of,
    map: map,
    ap: ap,
    chain: chain,
};
/**
 * @deprecated
 */
exports.deferContext = function (fa) {
    var keys = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        keys[_i - 1] = arguments[_i];
    }
    return new Context(function (outerE) { return new sink_utils_1.Sink(new Context(function (innerE) { return fa.run(Object.assign({}, outerE, innerE)); })); });
};
/**
 * @deprecated Use `Context` from `context2.utils.ts`
 */
exports.sequenceContext = Array_1.array.sequence(exports.context);
/**
 * @deprecated Use `Context` from `context2.utils.ts`
 */
exports.sequenceTContext = Apply_1.sequenceT(exports.context);
/**
 * @deprecated Use `Context` from `context2.utils.ts`
 */
exports.fromReader = function (r) { return new Context(function (e) { return new sink_utils_1.Sink(r(e)); }); };
/**
 * @deprecated Use `Context` from `context2.utils.ts`
 */
exports.combineContext = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var fas = args.slice(0, args.length - 1); //typesafe
    var project = args[args.length - 1]; //typesafe
    var sequenced = exports.sequenceContext(fas);
    return sequenced.chain(function (as) {
        return new Context(function () {
            var result = project.apply(void 0, as);
            return result instanceof sink_utils_1.Sink ? result : new sink_utils_1.Sink(result);
        });
    });
};
//# sourceMappingURL=context.utils.js.map