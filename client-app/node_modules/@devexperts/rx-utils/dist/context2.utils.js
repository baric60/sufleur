"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ReaderT_1 = require("fp-ts/lib/ReaderT");
var Reader_1 = require("fp-ts/lib/Reader");
var Apply_1 = require("fp-ts/lib/Apply");
var reader_utils_1 = require("@devexperts/utils/dist/adt/reader.utils");
var pipeable_1 = require("fp-ts/lib/pipeable");
var memoize_1 = require("@devexperts/utils/dist/function/memoize");
var Array_1 = require("fp-ts/lib/Array");
var sink2_utils_1 = require("./sink2.utils");
var Eq_1 = require("fp-ts/lib/Eq");
exports.URI = '@devexperts/dx-utils//Context';
var memo = memoize_1.memoOnce({
    equals: Eq_1.strictEqual,
});
exports.instanceContext = tslib_1.__assign(tslib_1.__assign({ URI: exports.URI }, ReaderT_1.getReaderM(sink2_utils_1.instanceSink)), { productLeft: function (fa, fb) { return function (e) { return sink2_utils_1.sink.sequenceT(fa(e), fb(e)); }; } });
var sequenceT_ = Apply_1.sequenceT(exports.instanceContext);
var sequenceArray = Array_1.array.sequence(exports.instanceContext);
var defer = function (fa) {
    var keys = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        keys[_i - 1] = arguments[_i];
    }
    return pipeable_1.pipe(reader_utils_1.deferReader.apply(void 0, tslib_1.__spreadArrays([fa], keys)), Reader_1.map(sink2_utils_1.instanceSink.of));
};
var combine = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var last = args.length - 1;
    var fas = sequenceArray(args.slice(0, last)); // guaranteed by ProductMap
    var project = memo(args[last]); // guaranteed by ProductMap
    return exports.instanceContext.map(fas, function (as) { return project.apply(void 0, as); });
};
var key = function () { return function (key) { return function (e) { return sink2_utils_1.sink.of(e[key]); }; }; };
exports.context = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, exports.instanceContext), pipeable_1.pipeable(exports.instanceContext)), { sequenceT: sequenceT_, sequenceArray: sequenceArray,
    combine: combine,
    defer: defer,
    key: key });
//# sourceMappingURL=context2.utils.js.map