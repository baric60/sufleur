import { Observable } from 'rxjs';
/**
 * @deprecated Use some purely functional reactive structure, for example `Observable<Map<K, V>>`
 */
export declare class ObservableMap<K, V> {
    private cache;
    private allSubject$;
    private isInTransaction;
    private hasChanges;
    private _keys$;
    readonly keys$: Observable<K[]>;
    readonly values$: Observable<V[]>;
    readonly entries$: Observable<[K, V][]>;
    readonly size: number;
    readonly isEmpty: boolean;
    private handleKeys;
    has(key: K): boolean;
    get(key: K): Observable<V>;
    getValue(key: K): V | undefined;
    set(key: K, value: V): void;
    setMany(entries: [K, V][]): void;
    transaction(thunk: () => void): void;
    delete(key: K): void;
    deleteMany(keys: K[]): void;
    clear(): void;
    private getOrCreateCached;
}
